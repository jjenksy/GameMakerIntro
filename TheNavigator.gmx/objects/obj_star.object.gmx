<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create particle system This function is used to create a new particle system 
//and will return a unique index number that should be stored and used in all 
//further functions relating to that system. 
stars = part_system_create();
//setting the depth to 50 so it is above the background but below the objects
//arg1 The index of the particle system to change.
//arg2 The depth at which to set the particle system
part_system_depth(stars, 50);


//create a starParticle system
star = part_type_create();
//creates a spark kinda looks like a star pixel may work to
//Sets the shape of created particles to one of the fourteen in-built shapes.
part_type_shape(star,pt_shape_spark);


//Sets the angle of the particle type. 
part_type_orientation(star,0,0,0,0,1);

//This function is used to determine the size 
//of the particle when it is created and can 
//also be used to make the particle increase or decrease in size over its lifetime.
part_type_size(star,0.05, 0.25,0,0);

//This function is used to determine the speed of 
//the particle when it is created and can also be used 
//to make the particle increase or decrease its speed over its lifetime.
part_type_speed(star ,1,1.5,0.05,0.05);

//This function is used to determine the direction
// of the particle when it is created and can also be used 
//to make the particle increase or decrease its direction over its lifetime.
part_type_direction(star, 270,270,0,0);
//life between 100 to 150 frames
//This is the function that governs how long each individual particle of the indicated type remains on the screen. 
part_type_life(star,100,150);


//create the space by creating the emitter
star_emmiter = part_emitter_create(star);
//This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function 
//and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape.
part_emitter_region(star ,star_emmiter,0-100,room_width+100,-10,-5,ps_shape_ellipse, ps_distr_linear);
//This function allows you to set an emitter to stream a specific type of particle and is typically used the create 
//event as it is a one off code that sets the emitter to generate the number of particles specified every step of the game there-after. 
part_emitter_stream(star ,star_emmiter,stars,4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(star);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
